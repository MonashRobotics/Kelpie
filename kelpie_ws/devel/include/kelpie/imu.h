// Generated by gencpp from file kelpie/imu.msg
// DO NOT EDIT!


#ifndef KELPIE_MESSAGE_IMU_H
#define KELPIE_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kelpie/att.h>
#include <kelpie/xyz_float32.h>
#include <kelpie/xyz_float32.h>

namespace kelpie
{
template <class ContainerAllocator>
struct imu_
{
  typedef imu_<ContainerAllocator> Type;

  imu_()
    : att()
    , acc()
    , gyro()  {
    }
  imu_(const ContainerAllocator& _alloc)
    : att(_alloc)
    , acc(_alloc)
    , gyro(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kelpie::att_<ContainerAllocator>  _att_type;
  _att_type att;

   typedef  ::kelpie::xyz_float32_<ContainerAllocator>  _acc_type;
  _acc_type acc;

   typedef  ::kelpie::xyz_float32_<ContainerAllocator>  _gyro_type;
  _gyro_type gyro;





  typedef boost::shared_ptr< ::kelpie::imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kelpie::imu_<ContainerAllocator> const> ConstPtr;

}; // struct imu_

typedef ::kelpie::imu_<std::allocator<void> > imu;

typedef boost::shared_ptr< ::kelpie::imu > imuPtr;
typedef boost::shared_ptr< ::kelpie::imu const> imuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kelpie::imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kelpie::imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kelpie::imu_<ContainerAllocator1> & lhs, const ::kelpie::imu_<ContainerAllocator2> & rhs)
{
  return lhs.att == rhs.att &&
    lhs.acc == rhs.acc &&
    lhs.gyro == rhs.gyro;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kelpie::imu_<ContainerAllocator1> & lhs, const ::kelpie::imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kelpie

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kelpie::imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kelpie::imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kelpie::imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kelpie::imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kelpie::imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kelpie::imu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kelpie::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3e3586bb29c60a67ccc92ece7869236";
  }

  static const char* value(const ::kelpie::imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3e3586bb29c60a6ULL;
  static const uint64_t static_value2 = 0x7ccc92ece7869236ULL;
};

template<class ContainerAllocator>
struct DataType< ::kelpie::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kelpie/imu";
  }

  static const char* value(const ::kelpie::imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kelpie::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "att att\n"
"xyz_float32 acc\n"
"xyz_float32 gyro\n"
"\n"
"================================================================================\n"
"MSG: kelpie/att\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"\n"
"================================================================================\n"
"MSG: kelpie/xyz_float32\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::kelpie::imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kelpie::imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.att);
      stream.next(m.acc);
      stream.next(m.gyro);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kelpie::imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kelpie::imu_<ContainerAllocator>& v)
  {
    s << indent << "att: ";
    s << std::endl;
    Printer< ::kelpie::att_<ContainerAllocator> >::stream(s, indent + "  ", v.att);
    s << indent << "acc: ";
    s << std::endl;
    Printer< ::kelpie::xyz_float32_<ContainerAllocator> >::stream(s, indent + "  ", v.acc);
    s << indent << "gyro: ";
    s << std::endl;
    Printer< ::kelpie::xyz_float32_<ContainerAllocator> >::stream(s, indent + "  ", v.gyro);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KELPIE_MESSAGE_IMU_H
